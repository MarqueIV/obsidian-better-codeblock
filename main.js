/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  BetterCodeBlocks: () => BetterCodeBlocks,
  default: () => BetterCodeBlock
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_LANG = "";
var LANG_REG = /^language-/;
var LINE_SPLIT_MARK = "\n";
var titleRegExp = /TI:"([^"]*)"/i;
var highLightLinesRegExp = /HL:"([^"]*)"/i;
var foldRegExp = /"FOLD"/i;
var CB_PADDING_TOP = "35px";
var DEFAULT_SETTINGS = {
  substitutionTokenForSpace: void 0,
  titleBackgroundColor: "#00000020",
  titleFontColor: void 0,
  highLightColor: "#2d82cc20",
  excludeLangs: [],
  showLineNumber: true,
  showDividingLine: false,
  showLangNameInTopRight: true
};
var BetterCodeBlock = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("Loading Better Code Block Plugin");
      yield this.loadSettings();
      this.addSettingTab(new BetterCodeBlockTab(this.app, this));
      this.registerMarkdownPostProcessor((el, ctx) => {
        BetterCodeBlocks(el, ctx, this);
        app.workspace.on("resize", () => {
          resizeNumWrapAndHLWrap(el, ctx);
        });
      });
    });
  }
  onunload() {
    console.log("Unloading Better Code Block Plugin");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var BetterCodeBlockTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Exclude language list").setDesc("Title and line numbers do not apply in these languages, separate by `,`").addText((text) => text.setPlaceholder("like todoist,other,...").setValue(this.plugin.settings.excludeLangs.join(",")).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.excludeLangs = value.split(",");
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Font color of title").addText((tc) => tc.setPlaceholder("Enter a color").setValue(this.plugin.settings.titleFontColor).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.titleFontColor = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Background color of title").addText((tc) => tc.setPlaceholder("#00000020").setValue(this.plugin.settings.titleBackgroundColor).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.titleBackgroundColor = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("HighLight Color").addText((tc) => tc.setPlaceholder("#2d82cc20").setValue(this.plugin.settings.highLightColor).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.highLightColor = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Show line number").addToggle((tc) => tc.setValue(this.plugin.settings.showLineNumber).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showLineNumber = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Show dividing line").addToggle((tc) => tc.setValue(this.plugin.settings.showDividingLine).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showDividingLine = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Show language name in the top right").addToggle((tc) => tc.setValue(this.plugin.settings.showLangNameInTopRight).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showLangNameInTopRight = value;
      yield this.plugin.saveSettings();
    })));
  }
};
function BetterCodeBlocks(el, context, plugin) {
  return __async(this, null, function* () {
    var _a;
    const settings = plugin.settings;
    const codeElm = el.querySelector("pre > code");
    if (!codeElm) {
      return;
    }
    let lang = DEFAULT_LANG;
    if (plugin.settings.excludeLangs.some((eLangName) => codeElm.classList.contains(`language-${eLangName}`))) {
      return;
    }
    codeElm.classList.forEach((value, key, parent) => {
      if (LANG_REG.test(value)) {
        lang = value.replace("language-", "");
        return;
      }
    });
    if (lang == DEFAULT_LANG) {
      return;
    }
    let codeBlock = context.getSectionInfo(codeElm);
    let codeBlockFirstLine = "";
    if (codeBlock) {
      let view = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      codeBlockFirstLine = view.editor.getLine(codeBlock.lineStart);
    } else {
      let file = app.vault.getAbstractFileByPath(context.sourcePath);
      let cache = app.metadataCache.getCache(context.sourcePath);
      let fileContent = yield app.vault.cachedRead(file);
      let fileContentLines = fileContent.split(/\n/g);
      let codeBlockFirstLines = [];
      let codeBlockSections = [];
      (_a = cache.sections) == null ? void 0 : _a.forEach((element) => __async(this, null, function* () {
        if (element.type == "code") {
          let lineStart = element.position.start.line;
          codeBlockFirstLine = fileContentLines[lineStart];
          codeBlockSections.push(element);
          codeBlockFirstLines.push(codeBlockFirstLine);
        }
      }));
      exportPDF(el, plugin, codeBlockFirstLines, codeBlockSections);
      return;
    }
    let title = "";
    let highLightLines = [];
    if (codeBlockFirstLine.match(titleRegExp) != null) {
      title = codeBlockFirstLine.match(titleRegExp)[1];
    }
    if (codeBlockFirstLine.match(highLightLinesRegExp) != null) {
      let highLightLinesInfo = codeBlockFirstLine.match(highLightLinesRegExp)[1];
      highLightLines = analyseHighLightLines(highLightLinesInfo);
    }
    let isCollapse = false;
    if (foldRegExp.test(codeBlockFirstLine)) {
      isCollapse = true;
    }
    const pre = codeElm.parentElement;
    const div = pre.parentElement;
    const contentList = codeElm.textContent.split(LINE_SPLIT_MARK);
    const lineSize = contentList.length - 1;
    const cbMeta = { langName: lang, lineSize, pre, code: codeElm, title, isCollapse, div, contentList, highLightLines };
    const { showLineNumber } = plugin.settings;
    addCodeTitleWrapper(plugin, pre, cbMeta);
    addCodeTitle(plugin, pre, cbMeta);
    if (showLineNumber) {
      addLineNumber(plugin, cbMeta);
    }
    addLineHighLight(plugin, pre, cbMeta);
    resizeNumWrapAndHLWrap(el, context);
  });
}
function createElement(tagName, defaultClassName) {
  const element = document.createElement(tagName);
  if (defaultClassName) {
    element.className = defaultClassName;
  }
  return element;
}
function addCodeTitleWrapper(plugin, preElm, cbMeta) {
  preElm.style.setProperty("position", "relative", "important");
  preElm.style.setProperty("padding-top", CB_PADDING_TOP, "important");
  let wrapper = document.createElement("pre");
  if (cbMeta.isCollapse) {
    wrapper.setAttribute("closed", "");
  }
  wrapper.className = "obsidian-embedded-code-title__code-block-title";
  wrapper.style.backgroundColor = plugin.settings.titleBackgroundColor || "#00000020";
  let collapser = createElement("div", "collapser");
  let handle = createElement("div", "handle");
  collapser.appendChild(handle);
  wrapper.appendChild(collapser);
  wrapper.addEventListener("click", function() {
    if (wrapper.hasAttribute("closed")) {
      wrapper.removeAttribute("closed");
    } else {
      wrapper.setAttribute("closed", "");
    }
  });
  preElm.appendChild(wrapper);
}
function addCodeTitle(plugin, preElm, cbMeta) {
  let wrapper = preElm.querySelector(".obsidian-embedded-code-title__code-block-title");
  let titleElm = document.createElement("div");
  titleElm.className = "title";
  titleElm.appendText(cbMeta.title);
  wrapper.appendChild(titleElm);
  if (plugin.settings.titleFontColor) {
    titleElm.style.setProperty("color", plugin.settings.titleFontColor, "important");
  }
  if (plugin.settings.showLangNameInTopRight) {
    let langName = document.createElement("div");
    let langNameString = cbMeta.langName;
    langNameString = langNameString[0].toUpperCase() + langNameString.slice(1);
    langName.appendText(langNameString);
    langName.className = "langName";
    wrapper.appendChild(langName);
  }
  preElm.prepend(wrapper);
}
function addLineNumber(plugin, cbMeta) {
  const { lineSize, pre, div } = cbMeta;
  div.classList.add("code-block-wrap");
  const lineNumber = createElement("span", "code-block-linenum-wrap");
  lineNumber.style.top = CB_PADDING_TOP;
  Array.from({ length: lineSize }, (v, k) => k).forEach((i) => {
    const singleLine = createElement("span", "code-block-linenum");
    lineNumber.appendChild(singleLine);
  });
  if (plugin.settings.showDividingLine) {
    lineNumber.style.borderRight = "1px currentColor solid";
  }
  pre.appendChild(lineNumber);
  pre.classList.add("code-block-pre__has-linenum");
}
function addLineHighLight(plugin, preElm, cbMeta) {
  if (cbMeta.highLightLines.length == 0)
    return;
  let highLightWrap = document.createElement("pre");
  highLightWrap.className = "code-block-highlight-wrap";
  for (let i = 0; i < cbMeta.lineSize; i++) {
    const singleLine = createElement("span", "code-block-highlight");
    if (cbMeta.highLightLines.contains(i + 1)) {
      singleLine.style.backgroundColor = plugin.settings.highLightColor || "#2d82cc20";
    }
    highLightWrap.appendChild(singleLine);
  }
  preElm.appendChild(highLightWrap);
}
function analyseHighLightLines(str) {
  str = str.replace(/\s*/g, "");
  const result = [];
  let strs = str.split(",");
  strs.forEach((it) => {
    if (/\w+-\w+/.test(it)) {
      let left = Number(it.split("-")[0]);
      let right = Number(it.split("-")[1]);
      for (let i = left; i <= right; i++) {
        result.push(i);
      }
    } else {
      result.push(Number(it));
    }
  });
  return result;
}
function resizeNumWrapAndHLWrap(el, context) {
  setTimeout(function() {
    return __async(this, null, function* () {
      let codeBlockEl = el.querySelector("pre > code");
      if (!codeBlockEl)
        return;
      let numWrap = el.querySelector(".code-block-linenum-wrap");
      let highWrap = el.querySelector(".code-block-highlight-wrap");
      let codeBlockInfo = context.getSectionInfo(codeBlockEl);
      let view;
      let codeBlockLineNum;
      let lineStart = 0;
      let lineEnd = 0;
      if (codeBlockInfo) {
        view = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        codeBlockLineNum = codeBlockInfo.lineEnd - codeBlockInfo.lineStart - 1;
      } else {
        return;
      }
      let span = createElement("span");
      for (let i = 0; i < codeBlockLineNum; i++) {
        let oneLineText;
        if (view) {
          oneLineText = view.editor.getLine(codeBlockInfo.lineStart + i + 1);
        } else {
        }
        span.innerHTML = oneLineText || "0";
        codeBlockEl.appendChild(span);
        span.style.display = "block";
        let lineHeight = span.getBoundingClientRect().height + "px";
        let numOneLine = numWrap ? numWrap.childNodes[i] : null;
        let hlOneLine = highWrap ? highWrap.childNodes[i] : null;
        if (numOneLine)
          numOneLine.style.height = lineHeight;
        if (hlOneLine)
          hlOneLine.style.height = lineHeight;
        span.remove();
      }
    });
  }, 100);
}
function exportPDF(el, plugin, codeBlockFirstLines, codeBlockSections) {
  let codeBlocks = el.querySelectorAll("pre > code");
  codeBlocks.forEach((codeElm, key) => {
    let langName = "", title = "", highLightLines = [];
    codeElm.classList.forEach((value) => {
      if (LANG_REG.test(value)) {
        langName = value.replace("language-", "");
        return;
      }
    });
    if (codeBlockFirstLines[key].match(titleRegExp) != null) {
      title = codeBlockFirstLines[key].match(titleRegExp)[1];
    }
    if (codeBlockFirstLines[key].match(highLightLinesRegExp) != null) {
      let highLightLinesInfo = codeBlockFirstLines[key].match(highLightLinesRegExp)[1];
      highLightLines = analyseHighLightLines(highLightLinesInfo);
    }
    let lineSize = codeBlockSections[key].position.end.line - codeBlockSections[key].position.start.line - 1;
    let cbMeta = {
      langName,
      lineSize,
      pre: codeElm.parentElement,
      code: codeElm,
      title,
      isCollapse: false,
      div: codeElm.parentElement.parentElement,
      contentList: [],
      highLightLines
    };
    addCodeTitleWrapper(plugin, codeElm.parentElement, cbMeta);
    addCodeTitle(plugin, cbMeta.pre, cbMeta);
    if (plugin.settings.showLineNumber) {
      addLineNumber(plugin, cbMeta);
    }
    addLineHighLight(plugin, cbMeta.pre, cbMeta);
  });
}
//# sourceMappingURL=data:application/json;base64,
